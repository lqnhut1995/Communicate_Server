#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('example:server');
var http = require('http');
var ExtractDatabase=require('../models/ExtractDatabase');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require('socket.io')(server);

io.on('connection',function(socket){

  socket.on('join',function(roominfo){
    // if(io.sockets.adapter.sids[socket.id][roominfo['room']]){
      socket.join(roominfo['room']);
    // }
    
  });

  socket.on('disconnect',function(){
    console.log('a user disconnected');
  });

  socket.on('message',function(data){
    const userid=data['userid'];
    const uploadtime=data['uploadtime'];
    const roomid=data['room'];
    const type=data['type'];
    ExtractDatabase.SavePrivateMessage(userid,uploadtime,roomid,type,data['data'],function(err,rows){
      if(err){
        console.log(err);
      }else{
        
        var dic={
          'userid':data['userid'],
          'username':data['username'],
          'room':data['room'],
          'uploadtime':data['uploadtime']
        };
        dic['items']=rows[rows.length-1];
        io.in(data['room']).emit('toroom',dic);
      }
    });
  });

  socket.on('updatemessage',function(data){
    ExtractDatabase.UpdatePrivateMessage(data['data'],function(err,rows){
      if(err){
        console.log(err);
      }else{
        var dic={
          'userid':data['userid'],
          'username':data['username']
        };
        dic['items']=rows[rows.length-1];
        io.in(data['room']).emit('updateroom',dic);
      }
    });
  });
  //Voice Chat Server
  // socket.on('msgtoclient1',function(data){
  //   socket.in(data['room']).emit('sendfromserver1',data);
  // });
  // socket.on('msgtoclient2',function(data){
  //   socket.in(data['room']).emit('sendAnswer',data);
  // });
  // socket.on('msgtoclient3',function(data){
  //   socket.in(data['room']).emit('sendIceCandidate',data);
  // });
  // socket.on('msgtoclient4',function(data){
  //   socket.in(data['room']).emit('sendIceCandidate',data);
  // });
  // socket.on('connectstate',function(data){
  //   socket.in(data['room']).emit('connectStateChecked',data);
  // });
  // socket.on('disconnectstate',function(data){
  //   socket.in(data['room']).emit('disconnectStateChecked',data);
  // });
});

